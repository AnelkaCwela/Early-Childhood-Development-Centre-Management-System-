// <auto-generated />
using System;
using Algorithm_3rd_Year_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Algorithm_3rd_Year_Project.Migrations
{
    [DbContext(typeof(DBCONTEX))]
    [Migration("20210923190808_lll")]
    partial class lll
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.AttendanceModel", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnroleId")
                        .HasColumnType("int");

                    b.Property<int>("PupilId")
                        .HasColumnType("int");

                    b.Property<bool>("attend")
                        .HasColumnType("bit");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EnroleId");

                    b.ToTable("AttendanceTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreManageModel", b =>
                {
                    b.Property<int>("CentreManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Profile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tittleModel")
                        .HasColumnType("int");

                    b.HasKey("CentreManagerId");

                    b.HasIndex("CentreId");

                    b.ToTable("CentreManageTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreModel", b =>
                {
                    b.Property<int>("CentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentraEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentreFaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentreNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("CentreId");

                    b.HasIndex("SuburbId");

                    b.ToTable("CentreTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreProgramModel", b =>
                {
                    b.Property<int>("CentreProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramDescr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOferd")
                        .HasColumnType("datetime2");

                    b.HasKey("CentreProgramId");

                    b.HasIndex("CentreId");

                    b.ToTable("CentreProgramTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreSerViceTypeModel", b =>
                {
                    b.Property<int>("CentreServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CentreServiceTypeId");

                    b.ToTable("CentreSerViceTypeTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreServiceModel", b =>
                {
                    b.Property<int>("CentreServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<int>("CentreServiceTypeId")
                        .HasColumnType("int");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CentreServiceId");

                    b.HasIndex("CentreId");

                    b.HasIndex("CentreServiceTypeId");

                    b.ToTable("CentreServiceTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CoodinatorModel", b =>
                {
                    b.Property<int>("CoodinatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Profile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tittleModel")
                        .HasColumnType("int");

                    b.HasKey("CoodinatorId");

                    b.HasIndex("RegionId");

                    b.ToTable("CoodinatorTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.EnroleModel", b =>
                {
                    b.Property<int>("EnroleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enrole")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnroleYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgrameOfferdId")
                        .HasColumnType("int");

                    b.Property<int>("PupilId")
                        .HasColumnType("int");

                    b.HasKey("EnroleId");

                    b.HasIndex("ProgrameOfferdId");

                    b.HasIndex("PupilId");

                    b.ToTable("EnroleTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.GanderModel", b =>
                {
                    b.Property<int>("GanderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gander")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GanderId");

                    b.ToTable("GanderModelTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.LiaisonModel", b =>
                {
                    b.Property<int>("LiaisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Profile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tittleModel")
                        .HasColumnType("int");

                    b.HasKey("LiaisonId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("LiaisonTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.MarksModel", b =>
                {
                    b.Property<int>("MarksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnroleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PupilId")
                        .HasColumnType("int");

                    b.Property<int>("taskId")
                        .HasColumnType("int");

                    b.HasKey("MarksId");

                    b.HasIndex("EnroleId");

                    b.HasIndex("taskId");

                    b.ToTable("MarksTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.ParentModel", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("relationShip")
                        .HasColumnType("int");

                    b.HasKey("ParentId");

                    b.ToTable("ParentTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.ProgrameOfferdModel", b =>
                {
                    b.Property<int>("ProgrameOfferdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("ProgrameOfferdId");

                    b.HasIndex("CentreProgramId");

                    b.HasIndex("teacherId");

                    b.ToTable("ProgrameOfferdTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.ProvinceModel", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("ProvinceTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.PupilModel", b =>
                {
                    b.Property<int>("PupilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GanderId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<byte[]>("birthDocument")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PupilId");

                    b.HasIndex("GanderId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("PupilTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.QualificationModel", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationId");

                    b.ToTable("QualificationTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.RegionModel", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("RegionTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Statuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("StatusTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.SuburbModel", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("SuburbId");

                    b.HasIndex("RegionId");

                    b.ToTable("SuburbTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.TaskModel", b =>
                {
                    b.Property<int>("taskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Percent_Contribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("taskId");

                    b.ToTable("taskTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.TeacherModel", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Profile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tittleModel")
                        .HasColumnType("int");

                    b.HasKey("teacherId");

                    b.HasIndex("QualificationId");

                    b.ToTable("teacherTbl");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CellNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.AttendanceModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.EnroleModel", "EnroleModel")
                        .WithMany()
                        .HasForeignKey("EnroleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnroleModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreManageModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.CentreModel", "CentreModel")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentreModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.SuburbModel", "SuburbModel")
                        .WithMany()
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuburbModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreProgramModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.CentreModel", "CentreModel")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentreModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CentreServiceModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.CentreModel", "CentreModel")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.CentreSerViceTypeModel", "CentreSerViceTypeModel")
                        .WithMany()
                        .HasForeignKey("CentreServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentreModel");

                    b.Navigation("CentreSerViceTypeModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.CoodinatorModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.RegionModel", "RegionModel")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.EnroleModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.ProgrameOfferdModel", "ProgrameOfferdModel")
                        .WithMany()
                        .HasForeignKey("ProgrameOfferdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.PupilModel", "PupilModel")
                        .WithMany()
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrameOfferdModel");

                    b.Navigation("PupilModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.LiaisonModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.ProvinceModel", "ProvinceModel")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvinceModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.MarksModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.EnroleModel", "enroleModel")
                        .WithMany()
                        .HasForeignKey("EnroleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.TaskModel", "TaskModel")
                        .WithMany()
                        .HasForeignKey("taskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("enroleModel");

                    b.Navigation("TaskModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.ProgrameOfferdModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.CentreProgramModel", "CentreProgramModel")
                        .WithMany()
                        .HasForeignKey("CentreProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.TeacherModel", "TeacherModel")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentreProgramModel");

                    b.Navigation("TeacherModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.PupilModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.GanderModel", "GanderModel")
                        .WithMany()
                        .HasForeignKey("GanderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.ParentModel", "ParentModel")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GanderModel");

                    b.Navigation("ParentModel");

                    b.Navigation("StatusModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.RegionModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.ProvinceModel", "ProvinceModel")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvinceModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.SuburbModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.RegionModel", "RegionModel")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionModel");
                });

            modelBuilder.Entity("Algorithm_3rd_Year_Project.Models.DataModel.TeacherModel", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.QualificationModel", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Algorithm_3rd_Year_Project.Models.DataModel.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
